# -*- coding: utf-8 -*-
"""l08c05_forecasting_with_machine_learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/tensorflow/examples/blob/master/courses/udacity_intro_to_tensorflow_for_deep_learning/l08c05_forecasting_with_machine_learning.ipynb

##### Copyright 2018 The TensorFlow Authors.
"""

#@title Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""# Forecasting with machine learning

<table class="tfo-notebook-buttons" align="left">
  <td>
    <a target="_blank" href="https://colab.research.google.com/github/tensorflow/examples/blob/master/courses/udacity_intro_to_tensorflow_for_deep_learning/l08c05_forecasting_with_machine_learning.ipynb"><img src="https://www.tensorflow.org/images/colab_logo_32px.png" />Run in Google Colab</a>
  </td>
  <td>
    <a target="_blank" href="https://github.com/tensorflow/examples/blob/master/courses/udacity_intro_to_tensorflow_for_deep_learning/l08c05_forecasting_with_machine_learning.ipynb"><img src="https://www.tensorflow.org/images/GitHub-Mark-32px.png" />View source on GitHub</a>
  </td>
</table>

## Setup
"""

import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf

keras = tf.keras

def plot_series(time, series, format="-", start=0, end=None, label=None):
    plt.plot(time[start:end], series[start:end], format, label=label)
    plt.xlabel("Time")
    plt.ylabel("Value")
    if label:
        plt.legend(fontsize=14)
    plt.grid(True)
    
def trend(time, slope=0):
    return slope * time
  
  
def seasonal_pattern(season_time):
    """Just an arbitrary pattern, you can change it if you wish"""
    return np.where(season_time < 0.4,
                    np.cos(season_time * 2 * np.pi),
                    1 / np.exp(3 * season_time))

  
def seasonality(time, period, amplitude=1, phase=0):
    """Repeats the same pattern at each period"""
    season_time = ((time + phase) % period) / period
    return amplitude * seasonal_pattern(season_time)
  
  
def white_noise(time, noise_level=1, seed=None):
    rnd = np.random.RandomState(seed)
    return rnd.randn(len(time)) * noise_level



"""## Forecasting with Machine Learning

First, we will train a model to forecast the next step given the previous 30 steps, therefore, we need to create a dataset of 30-step windows for training.
"""

def window_dataset(series, window_size, batch_size=32,
                   shuffle_buffer=1000):
    dataset = tf.data.Dataset.from_tensor_slices(series)
    dataset = dataset.window(window_size + 1, shift=1, drop_remainder=True)
    dataset = dataset.flat_map(lambda window: window.batch(window_size + 1))
    dataset = dataset.shuffle(shuffle_buffer)
    dataset = dataset.map(lambda window: (window[:-1], window[-1]))
    dataset = dataset.batch(batch_size).prefetch(1)
    for x, y in dataset:
        print("x =", x.numpy())
        print("y =", y.numpy())
    return dataset

def model_forecast(model, series, window_size):
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size))
    for d in ds:
        print(d.numpy())
    ds = ds.batch(7).prefetch(1)
    forecast = model.predict(ds)
    return forecast

if __name__ == '__main__':
    time = np.arange(4 * 365 + 1)

    slope = 0.05
    baseline = 10
    amplitude = 40
    series = baseline + trend(time, slope) + seasonality(time, period=365, amplitude=amplitude)

    noise_level = 5
    noise = white_noise(time, noise_level, seed=42)

    series += noise

    plt.figure(figsize=(10, 6))
    plot_series(time, series)
    plt.show()
    split_time = 1000
    time_train = time[:split_time]
    x_train = series[:split_time]
    time_valid = time[split_time:]
    x_valid = series[split_time:]

    """### Linear Model"""

    keras.backend.clear_session()
    tf.random.set_seed(42)
    np.random.seed(42)

    window_size = 30
    train_set = window_dataset(x_train, window_size)
    valid_set = window_dataset(x_valid, window_size)

    model = keras.models.Sequential([
      keras.layers.Dense(1, input_shape=[window_size])
    ])
    optimizer = keras.optimizers.SGD(lr=1e-5, momentum=0.9)
    model.compile(loss=keras.losses.Huber(),
                  optimizer=optimizer,
                  metrics=["mae"])
    model.fit(train_set, epochs=100, validation_data=valid_set)

    keras.backend.clear_session()
    tf.random.set_seed(42)
    np.random.seed(42)

    window_size = 30
    train_set = window_dataset(x_train, window_size)

    model = keras.models.Sequential([
      keras.layers.Dense(1, input_shape=[window_size])
    ])

    lr_schedule = keras.callbacks.LearningRateScheduler(
        lambda epoch: 1e-6 * 10**(epoch / 30))
    optimizer = keras.optimizers.SGD(lr=1e-6, momentum=0.9)
    model.compile(loss=keras.losses.Huber(),
                  optimizer=optimizer,
                  metrics=["mae"])
    history = model.fit(train_set, epochs=100, callbacks=[lr_schedule])

    plt.semilogx(history.history["lr"], history.history["loss"])
    plt.axis([1e-6, 1e-3, 0, 20])

    keras.backend.clear_session()
    tf.random.set_seed(42)
    np.random.seed(42)

    window_size = 30
    train_set = window_dataset(x_train, window_size)
    valid_set = window_dataset(x_valid, window_size)

    model = keras.models.Sequential([
      keras.layers.Dense(1, input_shape=[window_size])
    ])
    optimizer = keras.optimizers.SGD(lr=1e-5, momentum=0.9)
    model.compile(loss=keras.losses.Huber(),
                  optimizer=optimizer,
                  metrics=["mae"])
    early_stopping = keras.callbacks.EarlyStopping(patience=10)
    model.fit(train_set, epochs=500,
              validation_data=valid_set,
              callbacks=[early_stopping])



    lin_forecast = model_forecast(model, series[split_time - window_size:-1], window_size)[:, 0]

    lin_forecast.shape

    plt.figure(figsize=(10, 6))
    plot_series(time_valid, x_valid)
    plot_series(time_valid, lin_forecast)

    keras.metrics.mean_absolute_error(x_valid, lin_forecast).numpy()

    """### Dense Model Forecasting"""

    keras.backend.clear_session()
    tf.random.set_seed(42)
    np.random.seed(42)

    window_size = 30
    train_set = window_dataset(x_train, window_size)

    model = keras.models.Sequential([
      keras.layers.Dense(10, activation="relu", input_shape=[window_size]),
      keras.layers.Dense(10, activation="relu"),
      keras.layers.Dense(1)
    ])

    lr_schedule = keras.callbacks.LearningRateScheduler(
        lambda epoch: 1e-7 * 10**(epoch / 20))
    optimizer = keras.optimizers.SGD(lr=1e-7, momentum=0.9)
    model.compile(loss=keras.losses.Huber(),
                  optimizer=optimizer,
                  metrics=["mae"])
    history = model.fit(train_set, epochs=100, callbacks=[lr_schedule])

    plt.semilogx(history.history["lr"], history.history["loss"])
    plt.axis([1e-7, 5e-3, 0, 30])

    keras.backend.clear_session()
    tf.random.set_seed(42)
    np.random.seed(42)

    window_size = 30
    train_set = window_dataset(x_train, window_size)
    valid_set = window_dataset(x_valid, window_size)

    model = keras.models.Sequential([
      keras.layers.Dense(10, activation="relu", input_shape=[window_size]),
      keras.layers.Dense(10, activation="relu"),
      keras.layers.Dense(1)
    ])

    optimizer = keras.optimizers.SGD(lr=1e-5, momentum=0.9)
    model.compile(loss=keras.losses.Huber(),
                  optimizer=optimizer,
                  metrics=["mae"])
    early_stopping = keras.callbacks.EarlyStopping(patience=10)
    model.fit(train_set, epochs=500,
              validation_data=valid_set,
              callbacks=[early_stopping])

    dense_forecast = model_forecast(
        model,
        series[split_time - window_size:-1],
        window_size)[:, 0]

    plt.figure(figsize=(10, 6))
    plot_series(time_valid, x_valid)
    plot_series(time_valid, dense_forecast)

    keras.metrics.mean_absolute_error(x_valid, dense_forecast).numpy()